package com.cashback.api.controllers;

import com.cashback.api.services.FacebookTokenValidatorService;
import com.cashback.api.services.GoogleTokenValidatorService;
import com.cashback.api.services.UserDetailsCredentialService;
import com.cashback.api.util.CashbackLogger;
import com.cashback.api.viewmodels.ExternalUserViewModel;
import com.cashback.api.viewmodels.RegisterViewModel;
import com.google.gson.Gson;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Base64;
import java.util.Map;

/**
 * Created by george on 6/26/2017.
 */
@RestController
@RequestMapping(path = "/oauth/token")
public class AuthController {

    private GoogleTokenValidatorService googleValidationService;

    private FacebookTokenValidatorService facebookTokenValidatorService;

    private UserDetailsCredentialService usersService;

    private CashbackLogger _logger;

    @Autowired
    public AuthController(
            GoogleTokenValidatorService googleTokenValidatorService,
            FacebookTokenValidatorService facebookTokenValidatorService,
            UserDetailsCredentialService usersService,
            CashbackLogger logger) {
        this.googleValidationService = googleTokenValidatorService;
        this.facebookTokenValidatorService = facebookTokenValidatorService;
        this.usersService = usersService;
        this._logger = logger;
    }

    @Value("${GOOGLE_AUTH_CLIENT}")
    private String googleClient;

    @Value("${GOOGLE_AUTH_SECRET}")
    private String googleSecret;

    @Value("${FACEBOOK_AUTH_CLIENT}")
    private String facebookClient;

    @Value("${FACEBOOK_AUTH_SECRET}")
    private String facebookSecret;

    @ApiOperation(value = "Login with Google", notes = "Login with Google")
    @ApiImplicitParams({
            @ApiImplicitParam(
                    name = "Authorization",
                    paramType = "header",
                    required = true,
                    value = "The auth token generated by Google")})
    @RequestMapping(path = "/google", method = RequestMethod.GET)
    public Map<String, Object> loginWithGoogle(
            HttpServletRequest request, HttpServletResponse response) {
        String token = request.getHeader("Authorization");

        try {
            ExternalUserViewModel googleUser = googleValidationService.getUserInfo(token);

            _logger.logInfo("Successfully retrieved external Google user: " + googleUser.toString());

            return generateToken(googleUser.getEmail(), googleUser.getId(),
                    googleClient, googleSecret, request);
        } catch (Exception ex) {
            _logger.logException(ex);
            response.setStatus(401);
            return null;
        }
    }

    @ApiOperation(value = "Login/register with Facebook", notes = "Login/register with Facebook")
    @ApiImplicitParams({
            @ApiImplicitParam(
                    name = "Authorization",
                    paramType = "header",
                    required = true,
                    value = "Bearer + the auth token generated by Facebook")})
    @RequestMapping(path = "/facebook", method = RequestMethod.GET)
    public Map<String, Object> loginRegisterWithFacebook(
            HttpServletRequest request, HttpServletResponse response) {
        String token = request.getHeader("Authorization")
                .replace("Bearer ", "");

        try {
            ExternalUserViewModel externalUser = facebookTokenValidatorService.getUserInfo(token);

            _logger.logInfo("Successfully retrieved external Facebook user: " + externalUser.toString());

            String username = String.format("facebook-%s", externalUser.getId());

            try {
                usersService.loadUserByUsername(username);
            } catch (UsernameNotFoundException u) {

                _logger.logInfo("The user was not found. Registering a new user");

                RegisterViewModel registerVm = new RegisterViewModel() {{
                    setUsername(username);
                    setEmail(String.format("%s.%s@facebook.com",
                            externalUser.getFirstName(), externalUser.getLastName()));
                    setFirstName(externalUser.getFirstName());
                    setLastName(externalUser.getLastName());
                    setImageUrl(externalUser.getProfilePictureUrl());
                    setPassword(externalUser.getId());
                }};

                usersService.registerUser(registerVm);
            }

            return generateToken(username, externalUser.getId(), facebookClient, facebookSecret, request);
        } catch (Exception ex) {
            _logger.logException(ex);
            response.setStatus(401);
            return null;
        }
    }

    private Map<String, Object> generateToken(String username,
                                              String password,
                                              String client,
                                              String secret,
                                              HttpServletRequest requestContext)
            throws IOException, HttpRequestMethodNotSupportedException {

        _logger.logInfo("Generating a token for client " + client);

        CloseableHttpClient httpClient = HttpClientBuilder.create().build();

        String tokenEndpointUrl = getTokenEndpointUrl(requestContext);
        HttpPost request = new HttpPost(tokenEndpointUrl);

        String requestEntity = String.format("grant_type=%s&username=%s&password=%s",
                "password", username, password);

        StringEntity entity = new StringEntity(requestEntity);
        request.setEntity(entity);
        request.setHeader("Content-type", "application/x-www-form-urlencoded");
        request.setHeader("Accept", "application/json");
        String rawAuthHeader = client + ":" + secret;
        String encodedAuthHeader = new String(Base64.getEncoder().encode(rawAuthHeader.getBytes()));
        request.setHeader("Authorization", "Basic " + encodedAuthHeader);

        HttpResponse response = httpClient.execute(request);
        Gson gson = new Gson();
        Map<String, Object> tokenResponse = gson.fromJson(
                EntityUtils.toString(response.getEntity(), "UTF-8"), Map.class);

        httpClient.close();
        return tokenResponse;
    }

    private String getTokenEndpointUrl(HttpServletRequest requestContext) {
        String protocol = requestContext.getScheme();
        String server = requestContext.getServerName();
        boolean isLocal = server.equals("localhost");
        int port = isLocal ? requestContext.getLocalPort() : 443;

        return String.format("%s://%s:%d//oauth/token", protocol, server, port);
    }
}
